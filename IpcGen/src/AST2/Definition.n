using System.Collections.Generic;
using System.Text;

namespace AST2
{
	[ Record ]
	public variant Definition
	{
	| Const     { ty : Type; value : Constant }
	| Enum      { members : IEnumerable[EnumMember] }
	| Exception { fields : IEnumerable[Field] }
	| Service   { @base : option[string]; functions : IEnumerable[Function] }
	| Struct    { fields : IEnumerable[Field] }
	| Typedef   { ty : Type }

		public name : string;

		public ns : Namespace;

		public override ToString() : string
		{
			def CompoundToString[T]
				( kind    : string
				, name    : string
				, members : IEnumerable[T]
				)
			{
				def text = StringBuilder();
				_ = text.AppendLine($"$kind $name");
				_ = text.AppendLine("{");
				foreach (member in members)
					_ = text.AppendLine("\t" + member.ToString());
				_ = text.Append("}");
				text.ToString();
			}
			def MakeServiceName(name, @base)
			{
			| (name, Some(@base)) => $"$name extends $base"
			| (name, None)        => name
			}
			match (this)
			{
			| Const(ty, value)          => $"const $ty $name = $value"
			| Enum(members)             => CompoundToString("enum", name, members)
			| Exception(fields)         => CompoundToString("exception", name, fields)
			| Service(@base, functions) => CompoundToString("service", MakeServiceName(name, @base), functions)
			| Struct(fields)            => CompoundToString("struct", name, fields)
			| Typedef(ty)               => $"typedef $ty $name"
			}
		}
	}
}
