using Nemerle.Collections;
using System.Collections.Generic;
using System.Text;

namespace AST2
{
	[ Record ]
	public class Function
	{
		public Name       : string;
		public ReturnType : Type;
		public Fields     : IEnumerable[Field];
		public Throws     : IEnumerable[Field];
		public IsOneWay   : bool;

		public override ToString() : string
		{
			def text = StringBuilder();

			def oneway = if (IsOneWay) "oneway " else "";

			_ = text.Append($"$oneway$ReturnType $Name");

			match (Fields.NToList())
			{
			| [] =>
				_ = text.Append("()");
			| fields =>
				_ = text.AppendLine();
				foreach (field in fields with i)
				{
					def punct = if (i == 0) "( " else ", ";
					_ = text.AppendLine($"\t\t$punct$field");
				}
				_ = text.Append("\t\t)");
			}

			match (Throws.NToList())
			{
			| [] => ()
			| [ field ] =>
				_ = text.Append($" throws ($field)");
			| fields =>
				_ = text.AppendLine(" throws");
				foreach (field in fields with i)
				{
					def punct = if (i == 0) "( " else ", ";
					_ = text.AppendLine($"\t\t$punct$field");
				}
				_ = text.Append("\t\t)");
			}

			text.ToString();
		}
	}
}
