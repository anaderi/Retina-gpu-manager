using Nemerle.Collections;
using Nemerle.Peg;
using Nemerle.Utility;
using System.Collections.Generic;
using System.IO;
using System;

[ PegGrammar
	( Options = EmitDebugSources
	, Document
	, grammar
	{
		// tokens

		any   = ['\u0000'..'\uFFFF'];
		eol   = '\n' / '\r';
		space = [Zs] / '\t' / '\n' / '\r';

		lineComment  = "//" (!eol any)* eol;
		blockComment = "/*" (!"*/" any)* "*/";

		s : void = (lineComment / blockComment / space)*;

		DoubleQuoteLiteralText = (!'"' any)*;
		SingleQuoteLiteralText = (!"'" any)*;
		DoubleQuoteLiteral : string = '"' DoubleQuoteLiteralText '"';
		SingleQuoteLiteral : string = "'" SingleQuoteLiteralText "'";
		Literal : string = DoubleQuoteLiteral / SingleQuoteLiteral;

		IdentifierTerminal = ([Lu, Ll] / '_') ([Lu, Ll, Nd] / '.' / '_')*;
		Identifier : string = IdentifierTerminal;

		ListSeparator : void = ',' / ';';

		// types

		BaseType : AST.Type = "bool" / "byte" / "i16" / "i32" / "i64" / "double" / "string" / "binary";

		ContainerType : AST.Type = MapType / SetType / ListType;

		DefinitionType : AST.Type = BaseType / ContainerType;

		FieldType : AST.Type = BaseType / ContainerType / UserType;

		FunctionType : AST.Type = FieldType / VoidType;

		ListType : AST.Type = "list" s "<" s FieldType s ">";

		MapType : AST.Type = "map" s "<" s FieldType s "," FieldType s ">";

		SetType : AST.Type = "set" s "<" s FieldType s ">";

		UserType : AST.Type = Identifier;

		VoidType : AST.Type = "void";

		// constant values

		ConstValue : AST.Constant = IntConstant;

		IntConstantTerminal = ('+' / '-')? [Nd]+;
		IntConstant : AST.Constant = IntConstantTerminal;

		// enum members

		EnumValue : int = "=" s IntConstant;

		EnumMem : AST.EnumMember = Identifier s EnumValue? s ListSeparator? s;

		// field

		FieldID : int = IntConstant ":";

		FieldReq : AST.FieldRequiredness = "required" / "optional";

		Field : AST.Field = FieldID? s FieldReq? s FieldType s Identifier s ListSeparator? s;

		// service

		Function : AST.Function = "oneway"? s FunctionType s Identifier s "(" s Field* ")" s Throws? s ListSeparator? s;

		ServiceBase : string = "extends" s Identifier;

		Throws : List[AST.Field] = "throws" s "(" s Field* ")";

		// top level

		Document : AST.Document = Header* Definition*;

		// headers

		Header : AST.Header = Include / Namespace;

		Include : AST.Header = "include" s Literal s;

		Namespace : AST.Header = "namespace" s Identifier s Identifier s;

		// definitions

		Definition : AST.Definition = Const / Enum / Exception / Service / Struct / Typedef;

		Enum : AST.Definition = "enum" s Identifier s "{" s EnumMem* "}" s;

		Exception : AST.Definition = "exception" s Identifier s "{" s Field* "}" s;

		Const : AST.Definition = "const" s FieldType s Identifier s "=" s ConstValue s ListSeparator? s;

		Service : AST.Definition = "service" s Identifier s ServiceBase? s "{" s Function* "}" s;

		Typedef : AST.Definition = "typedef" s DefinitionType s Identifier s;

		Struct : AST.Definition = "struct" s Identifier s "{" s Field* "}" s;
	}
	)
]
public class Parser
{
	private BaseType(name : NToken) : AST.Type
	{
		AST.Type(GetText(name), [])
	}

	private Const
		( _const    : NToken
		, fieldType : AST.Type
		, name      : string
		, _equals   : NToken
		, value     : AST.Constant
		) : AST.Definition
	{
		AST.Definition.Const(fieldType, name, value)
	}

	private DoubleQuoteLiteral
		( _openQuote  : NToken
		, text        : NToken
		, _closeQuote : NToken
		) : string
	{
		GetText(text)
	}

	private Document
		( headers     : List[AST.Header]
		, definitions : List[AST.Definition]
		) : AST.Document
	{
		AST.Document(headers, definitions)
	}

	private Enum
		( _enum        : NToken
		, name         : string
		, _openBracket : NToken
		, members      : List[AST.EnumMember]
		, _closeQuote  : NToken
		) : AST.Definition
	{
		AST.Definition.Enum(name, members)
	}

	private EnumMem
		( name : string
		, value : option[int]
		) : AST.EnumMember
	{
		AST.EnumMember(name, value)
	}

	private EnumValue
		( _equals : NToken
		, number  : AST.Constant
		) : int
	{
		match (number)
		{
		| AST.Constant.Int(num) => num
		| _ => throw Exception("Enum value has to be an integer.")
		}
	}

	private Exception
		( _exception   : NToken
		, name         : string
		, _openBracket : NToken
		, fields       : List[AST.Field]
		, _closeQuote  : NToken
		) : AST.Definition
	{
		AST.Definition.Exception(name, fields)
	}

	private Field
		( id           : option[int]
		, requiredness : option[AST.FieldRequiredness]
		, ty           : AST.Type
		, name         : string
		) : AST.Field
	{
		AST.Field(id, requiredness, ty, name)
	}

	private FieldID
		( number : AST.Constant
		, _colon : NToken
		) : int
	{
		match (number)
		{
		| AST.Constant.Int(num) => num
		| _ => throw Exception("Field ID has to be an integer.")
		}
	}

	private FieldReq(text : NToken) : AST.FieldRequiredness
	{
		match (GetText(text))
		{
		| "required" => AST.FieldRequiredness.Required
		| "optional" => AST.FieldRequiredness.Optional
		| modifier   => throw Exception($"Unrecognized field modifier: $modifier.");
		}
	}

	private Function
		( oneway            : NToken
		, returnType        : AST.Type
		, name              : string
		, _openParenthesis  : NToken
		, fields            : List[AST.Field]
		, _closeParenthesis : NToken
		, throws            : option[List[AST.Field]]
		) : AST.Function
	{
		def oneway = GetText(oneway) == "oneway";
		def throws = match (throws)
		{
		| Some(fields) => fields
		| None()       => List()
		}
		AST.Function(name, returnType, fields, throws, oneway)
	}

	private Identifier(name : NToken) : string
	{
		GetText(name)
	}

	private Include(_ : NToken, path : string) : AST.Header
	{
		AST.Header.Include(path)
	}

	private IntConstant(text : NToken) : AST.Constant
	{
		AST.Constant.Int(int.Parse(GetText(text)))
	}

	private ListType
		( _typeName     : NToken
		, _openBracket  : NToken
		, valueType     : AST.Type
		, _closeBracket : NToken
		) : AST.Type
	{
		AST.Type("list", [ valueType ])
	}

	private MapType
		( _typeName     : NToken
		, _openBracket  : NToken
		, keyType       : AST.Type
		, _comma        : NToken
		, valueType     : AST.Type
		, _closeBracket : NToken
		) : AST.Type
	{
		AST.Type("map", [ keyType, valueType ])
	}

	private Namespace
		( _namespace : NToken
		, scope      : string
		, id         : string
		) : AST.Header
	{
		AST.Header.Namespace(id, scope)
	}

	private Service
		( _service      : NToken
		, name          : string
		, baseService   : option[string]
		, _openBracket  : NToken
		, functions     : List[AST.Function]
		, _closeBracket : NToken
		) : AST.Definition
	{
		AST.Definition.Service(name, baseService, functions)
	}

	private ServiceBase
		( _extends    : NToken
		, baseService : string
		) : string
	{
		baseService
	}

	private SetType
		( _typeName     : NToken
		, _openBracket  : NToken
		, valueType     : AST.Type
		, _closeBracket : NToken
		) : AST.Type
	{
		AST.Type("set", [ valueType ])
	}

	private SingleQuoteLiteral
		( _openQuote  : NToken
		, text        : NToken
		, _closeQuote : NToken
		) : string
	{
		GetText(text)
	}

	private Struct
		( _struct      : NToken
		, name         : string
		, _openBracket : NToken
		, fields       : List[AST.Field]
		, _closeQuote  : NToken
		) : AST.Definition
	{
		AST.Definition.Struct(name, fields)
	}

	private Throws
		( _throws           : NToken
		, _openParenthesis  : NToken
		, fields            : List[AST.Field]
		, _closeParenthesis : NToken
		) : List[AST.Field]
	{
		fields
	}

	private Typedef
		( _typedef       : NToken
		, definitionType : AST.Type
		, name           : string
		) : AST.Definition
	{
		AST.Definition.Typedef(definitionType, name)
	}

	private UserType(name : string) : AST.Type
	{
		AST.Type(name, [])
	}

	private VoidType(_ : NToken) : AST.Type
	{
		AST.Type("void", []);
	}
}
