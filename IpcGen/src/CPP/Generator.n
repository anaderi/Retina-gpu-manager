using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;

namespace CPP
{
	public class Generator
	{
		private indent : string;

		public this(indent : string)
		{
			this.indent = indent;
		}

		public WriteCode(api : AST.Api, name : string, rootDirectory : string) : void
		{
			def libDir    = Path.Combine(rootDirectory, "lib");
			def clientDir = Path.Combine(rootDirectory, "client");
			def serverDir = Path.Combine(rootDirectory, "server");

			foreach (dir in [rootDirectory, libDir, clientDir, serverDir])
				_ = Directory.CreateDirectory(dir);

			mutable headers     = List();
			mutable definitions = List();
			foreach ((definition, ns) in api.Definitions)
			{
				match (definition)
				{
				| AST.Definition.Enum
				| AST.Definition.Exception
				| AST.Definition.Struct =>
					headers.Add(CreateDefinitionHeader(definition, ns, libDir));
				| AST.Definition.Service as service =>
					CreateServerServiceIDs(service, ns, libDir);
					CreateClientServiceHeader(service, ns, name, clientDir);
					CreateServerServiceHeader(service, ns, name, serverDir);
					CreateServerServiceImplementation(service, ns, serverDir);
					CreateServerServiceWrapper(service, ns, serverDir);
				| _ =>
					definitions.Add(definition, ns);
				}
			}
			headers.Sort();
			CreateMainHeader(name, headers, definitions, libDir);
		}

		//---------------
		// implementation
		//---------------

		private CreateDefinitionHeader
			( definition : AST.Definition
			, ns         : AST.Namespace
			, directory  : string
			) : string
		{
			def fileName = MakeApiFileName(ns, definition.name, ".h");
			using (writer = CreateFile(Path.Combine(directory, fileName)))
			{
				writer.WriteMember("#pragma once");
				WriteIncludes(writer);
				foreach (part in ns.Parts)
					writer.OpenBlock("namespace {0}", part);
				WriteDefinition(definition, writer);
				foreach (_ in ns.Parts)
					writer.CloseBlock();
			}
			fileName;
		}

		private CreateMainHeader
			( apiName     : string
			, headers     : IEnumerable[string]
			, definitions : IEnumerable[AST.Definition * AST.Namespace]
			, directory   : string
			) : void
		{
			using (writer = CreateFile(MakeFilePath(directory, apiName, ".h")))
			{
				writer.WriteMember("#pragma once");
				foreach (definitions in GroupByNamespace(definitions))
				{
					def ns = definitions.Key;
					// open namespaces
					foreach (part in ns.Parts)
						writer.OpenBlock("namespace {0}", part);
					// write definitions
					foreach (definition in definitions)
						WriteDefinition(definition, writer);
					// close namespaces
					foreach (_ in ns.Parts)
						writer.CloseBlock();
				}
				foreach (header in headers)
					writer.WriteMember("#include \"{0}\"", header);
			}
		}

		private CreateClientServiceHeader
			( service   : AST.Definition.Service
			, ns        : AST.Namespace
			, apiName   : string
			, directory : string
			) : void
		{
			using (writer = CreateFile(MakeFilePath(directory, service.name, ".h")))
			{
				writer.WriteMember("#pragma once");
				writer.WriteMember("#include \"FastTrackIpc/Api/{0}.h\"", apiName);
				WriteIncludes(writer);

				foreach (part in ns.Parts)
					writer.OpenBlock("namespace {0}", part);

				match (service.@base)
				{
				| Some(@base) => writer.OpenBlock("class {0} : public {1}", service.name, @base);
				| None        => writer.OpenBlock("class {0}", service.name);
				}

				writer.WriteLabel("public");
				writer.WriteComment("interface");
				writer.WriteMember("{0}(IProtocol & protocol);", service.name);

				writer.WriteLabel("private");
				writer.WriteComment("service function wrappers");
				foreach (function in service.functions)
					WriteFunctionDefinition(function, writer);

				writer.WriteLabel("private");
				writer.WriteComment("data");
				writer.WriteMember("IProtocol & m_protocol");

				writer.CloseBlock();

				foreach (_ in ns.Parts)
					writer.CloseBlock();
			}
		}

		private CreateServerServiceHeader
			( service   : AST.Definition.Service
			, ns        : AST.Namespace
			, apiName   : string
			, directory : string
			) : void
		{
			using (writer = CreateFile(MakeFilePath(directory, service.name, ".h")))
			{
				writer.WriteMember("#pragma once");
				WriteIncludes(writer);
				writer.WriteMember("#include \"FastTrackIpc/Api/{0}.h\"", apiName);
				writer.WriteMember("#include \"FastTrackIpc/IProcessor.h\"");

				foreach (part in ns.Parts)
					writer.OpenBlock("namespace {0}", part);

				match (service.@base)
				{
				| Some(@base) => writer.OpenBlock("class {0} : public IProcessor, public {1}", service.name, @base);
				| None        => writer.OpenBlock("class {0} : public IProcessor", service.name);
				}

				writer.WriteLabel("public");
				writer.WriteComment("IProcess implementation");
				writer.WriteMember("virtual bool process(IProtocol & protocol) const;");

				writer.WriteLabel("private");
				writer.WriteComment("service functions for the user to implement");
				foreach (function in service.functions)
					WriteFunctionDefinition(function, writer);

				writer.WriteLabel("private");
				writer.WriteComment("generated wrappers");
				foreach (function in service.functions)
				{
					writer.WriteMember
						( "void process_{0}(IProtocol & protocol) const;"
						, function.Name
						);
				}

				writer.CloseBlock();

				foreach (_ in ns.Parts)
					writer.CloseBlock();
			}
		}

		private CreateServerServiceIDs
			( service   : AST.Definition.Service
			, ns        : AST.Namespace
			, directory : string
			) : void
		{
			using (writer = CreateFile(MakeFilePath(directory, service.name + "ID", ".h")))
			{
				writer.WriteMember("#pragma once");

				foreach (part in ns.Parts)
					writer.OpenBlock("namespace {0}", part);

				writer.OpenBlock("enum {0}ID", service.name);
				foreach (function in service.functions)
					writer.WriteMember("{0}ID_{1},", service.name, function.Name);
				writer.CloseBlock();

				foreach (_ in ns.Parts)
					writer.CloseBlock();
			}
		}

		private CreateServerServiceImplementation
			( service   : AST.Definition.Service
			, ns        : AST.Namespace
			, directory : string
			) : void
		{
			def MakeNamespacePrefix()
			{
				def name = StringBuilder();
				foreach (part in ns.Parts)
				{
					_ = name.Append(part);
					_ = name.Append("::");
				}
				name.ToString();
			}
			def nsPrefix = MakeNamespacePrefix();

			def WriteCall(function, writer)
			{
				unless (function.ReturnType.Name == "void")
				{
					writer.WriteMember
						( "{0} result = this->{1}({2});"
						, ToString(function.ReturnType)
						, function.Name
						, string.Join(", ", function.Fields.Select(_.Name))
						);
				}
			}
			using (writer = CreateFile(MakeFilePath(directory, service.name, ".cpp")))
			{
				writer.WriteMember("#include \"{0}.h\"", service.name);
				writer.WriteMember("#include \"FastTrackIpc/Api/{0}ID.h\"", service.name);

				writer.WriteComment("IProcess implementation");
				writer.OpenBlock("bool {0}{1}::process(IProtocol & protocol) const", nsPrefix, service.name);
				writer.WriteMember("int id = protocol.readInt32();");
				writer.OpenBlock("switch (id)");
				foreach (function in service.functions)
				{
					writer.WriteLabel(MakeServiceFunctionId(service, function));
					writer.WriteMember("process_{1}(protocol);", nsPrefix, service.name);
					writer.WriteMember("break;");
				}
				writer.WriteLabel("default");
				writer.WriteMember("throw exception(\"{0}{1}::process: unknown ID\")", nsPrefix, service.name);
				writer.CloseBlock();
				writer.WriteMember("return true;");
				writer.CloseBlock();

				writer.WriteComment("service function wrappers");
				foreach (function in service.functions)
				{
					writer.OpenBlock
						( "void {0}{1}::process_{2}(IProtocol & protocol) const"
						, nsPrefix
						, service.name
						, function.Name
						);
					foreach (field in function.Fields)
						WriteReadStatement(field.Name, field.Type, writer);
					WriteCall(function, writer);
					WriteWriteStatement("result", function.ReturnType, writer);
					writer.CloseBlock();
				}
			}
		}

		private CreateServerServiceWrapper
			( service   : AST.Definition.Service
			, ns        : AST.Namespace
			, directory : string
			) : void
		{
			def MakeNamespacePrefix()
			{
				def name = StringBuilder();
				foreach (part in ns.Parts)
				{
					_ = name.Append(part);
					_ = name.Append("::");
				}
				name.ToString();
			}
			def nsPrefix = MakeNamespacePrefix();

			def WriteFunctionImplementation(function, writer)
			{
				def FieldToString(f)
				{
					string.Format("{0} {1}", ToString(f.Type), f.Name)
				}
				writer.OpenBlock
					( "{0} {1}{2}::{3}({4})"
					, ToString(function.ReturnType)
					, nsPrefix
					, service.name
					, function.Name
					, string.Join(", ", function.Fields.Select(FieldToString))
					);
				writer.CloseBlock();
			}
			using (writer = CreateFile(MakeFilePath(directory, service.name + "_impl", ".cpp")))
			{
				writer.WriteMember("#include \"{0}.h\"", service.name);

				writer.WriteComment("service functions for the user to implement");
				foreach (function in service.functions)
					WriteFunctionImplementation(function, writer);
			}
		}

		private GroupByNamespace
			( definitions : IEnumerable[AST.Definition * AST.Namespace]
			) : IEnumerable[IGrouping[AST.Namespace, AST.Definition]]
		{
			definitions.GroupBy
				( keySelector     = (_, ns) => ns
				, elementSelector = (defn, _) => defn
				)
		}

		private MakeApiFileName
			( ns        : AST.Namespace
			, name      : string
			, extension : string
			) : string
		{
			def fileName = StringBuilder();
			foreach (part in ns.Parts)
			{
				_ = fileName.Append(part);
				_ = fileName.Append("_");
			}
			_ = fileName.Append(name);
			_ = fileName.Append(extension);
			fileName.ToString();
		}

		private MakeFilePath
			( directory : string
			, fileName  : string
			, extension : string
			) : string
		{
			Path.Combine(directory, fileName + extension)
		}

		private MakeServiceFunctionId
			( service  : AST.Definition.Service
			, function : AST.Function
			) : string
		{
			service.name + "Id_" + function.Name
		}

		private WriteDefinition
			( definition  : AST.Definition
			, writer      : CodeWriter
			) : void
		{
			def name = definition.name;

			match (definition)
			{
			| Const(ty, value) =>
				writer.WriteMember("const {0} {1} = {2};", ToString(ty), name, ToString(value))

			| Enum(members) =>
				writer.OpenBlock("enum {0}", name);
				foreach (member in members)
				{
					match (member.Value)
					{
					| Some(num) => writer.WriteMember("{0} = {1},", member.Name, num)
					| None      => writer.WriteMember("{0},", member.Name)
					}
				}
				writer.CloseBlock();

			| Exception(fields) =>
				writer.OpenBlock("class {0} : public std::exception", name);
				foreach (field in fields)
					writer.WriteMember("{0} {1};", ToString(field.Type), field.Name);
				writer.CloseBlock();

			| Service => ()

			| Struct(fields) =>
				writer.OpenBlock("class {0}", name);
				foreach (field in fields)
					writer.WriteMember("{0} {1};", ToString(field.Type), field.Name);
				writer.CloseBlock();

			| Typedef(ty) =>
				writer.WriteMember("typedef {0} {1};", ToString(ty), name);
			}
		}

		private WriteFunctionDefinition
			( function : AST.Function
			, writer   : CodeWriter
			) : void
		{
			def FieldToString(f)
			{
				string.Format("{0} {1}", ToString(f.Type), f.Name)
			}

			writer.WriteMember
				( "{0} {1}({2});"
				, ToString(function.ReturnType)
				, function.Name
				, string.Join(", ", function.Fields.Select(FieldToString))
				);
		}

		private WriteIncludes(writer : CodeWriter) : void
		{
			def includes = [ "exception", "map", "set", "stdint.h", "vector" ];
			foreach (entry in includes)
				writer.WriteMember("#include <{0}>", entry);
		}

		private WriteReadStatement
			( name   : string
			, ty     : AST.Type
			, writer : CodeWriter
			) : void
		{
			match (ty.Name)
			{
			| "binary" => ()
			| "bool" =>
				writer.WriteMember("bool {0} = protocol.readBool();", name);
			| "byte" =>
				writer.WriteMember("int8_t {0} = protocol.readByte();", name);
			| "double" =>
				writer.WriteMember("double {0} = protocol.readDouble();", name);
			| "i16" =>
				writer.WriteMember("int16_t {0} = protocol.readInt16();", name);
			| "i32" =>
				writer.WriteMember("int32_t {0} = protocol.readInt32();", name);
			| "i64" =>
				writer.WriteMember("int64_t {0} = protocol.readInt64();", name);
			| "list" =>
				writer.WriteMember("{0} {1}(protocol.readInt32());", ToString(ty), name);
				writer.OpenBlock("for (int i = 0, size = {0}.size(); i != size; ++i)", name);
				WriteReadStatement("$name[i]", ty.Parameters.Head, writer);
				writer.CloseBlock();
			| "map"    => ()
			| "set"    => ()
			| "string" =>
				writer.WriteMember("std::string {0} = protocol.readString();", name);
			| "void"   => ()
			| _ =>
				writer.WriteMember("{0} {1};", ToString(ty), name);
				writer.WriteMember("{0}.read(protocol);", name);
			}
		}

		private WriteWriteStatement
			( name   : string
			, ty     : AST.Type
			, writer : CodeWriter
			) : void
		{
			match (ty.Name)
			{
			| "binary" =>
				// make binary a list<byte>
				def listType = AST.Type("list", [AST.Type("byte", [])]);
				WriteWriteStatement(name, listType, writer);
			| "bool" =>
				writer.WriteMember("protocol.writeBool({0});", name);
			| "byte" =>
				writer.WriteMember("protocol.writeByte({0});", name);
			| "double" =>
				writer.WriteMember("protocol.writeDouble({0});", name);
			| "i16" =>
				writer.WriteMember("protocol.writeInt16({0});", name);
			| "i32" =>
				writer.WriteMember("protocol.writeInt32({0});", name);
			| "i64" =>
				writer.WriteMember("protocol.writeInt64({0});", name);
			| "list" =>
				writer.WriteMember("protocol.WriteInt32({0}.size());", name);
				writer.OpenBlock("for (int i = 0, size = {0}.size(); i != size; ++i)", name);
				WriteWriteStatement($"$name[i]", ty.Parameters.Head, writer);
				writer.CloseBlock();
			| "map"    => ()
			| "set"    => ()
			| "string" =>
				writer.WriteMember("protocol.writeString({0});", name);
			| "void"   => ()
			| _ =>
				writer.WriteMember("{0}.write(protocol);", name);
			}
		}

		private ToString(ty : AST.Type) : string
		{
			def name = match (ty.Name)
			{
			| "binary" => "std::vector"
			| "bool"   => "bool"
			| "byte"   => "uint8_t"
			| "double" => "double"
			| "i16"    => "int16_t"
			| "i32"    => "int32_t"
			| "i64"    => "int64_t"
			| "list"   => "std::vector"
			| "map"    => "std::map"
			| "set"    => "std::set"
			| "string" => "std::string"
			| "void"   => "void"
			| name     => name
			}
			if (ty.Parameters == [])
				name
			else
				string.Format("{0}<{1}>", name, string.Join(", ", ty.Parameters.Map(ToString)))
		}

		private ToString(ty : AST.Constant) : string
		{
		| Int(x) => x.ToString();
		}

		private CreateFile(path : string) : CodeWriter
		{
			def writer = CodeWriter(indent, File.CreateText(path));
			writer.WriteComment("Automatically generated file");
			writer;
		}
	}
}
