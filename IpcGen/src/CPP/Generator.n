using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;

namespace CPP
{
	public class Generator
	{
		private mainHeaderName = "api";

		private indent : string;

		public this(indent : string)
		{
			this.indent = indent;
		}

		public WriteCode(api : AST2.Api, rootDirectory : string) : void
		{
			def libDefDir = $@"$rootDirectory\FastTrackIpc\FastTrackIpc\api";
			def libImpDir = $@"$rootDirectory\FastTrackIpc\src\api";
			def clientDir = $@"$rootDirectory\FastTrackSvc\src\api";
			def serverDir = $@"$rootDirectory\FastTrackD\src\api";

			foreach (dir in [libDefDir, libImpDir, clientDir, serverDir])
				_ = Directory.CreateDirectory(dir);

			mutable headers     = List();
			mutable definitions = List();
			foreach (definition in api.Definitions.Values)
			{
				def ns = definition.ns;
				match (definition)
				{
				| Collection | Primitive | Void =>
					()
				| Const | Typedef =>
					definitions.Add(definition, ns);
				| Enum =>
					headers.Add(CreateDefinitionHeader(definition, ns, libDefDir));
				| Exception =>
					headers.Add(CreateDefinitionHeader(definition, ns, libDefDir));
				| Struct as @struct =>
					headers.Add(CreateDefinitionHeader(@struct, ns, libDefDir));
					CreateStructImplementation(api, @struct, ns, libImpDir);
				| Service as service =>
					CreateServerServiceIDs(service, ns, clientDir);
					CreateServerServiceIDs(service, ns, serverDir);

					CreateClientServiceHeader(service, ns, clientDir);
					CreateClientServiceImplementation(api, service, ns, clientDir);

					CreateServerServiceHeader(service, ns, serverDir);
					CreateServerServiceImplementation(api, service, ns, serverDir);
					CreateServerServiceStubs(service, ns, serverDir);
				}
			}
			headers.Sort();
			CreateMainHeader(headers, definitions, libDefDir);
		}

		//---------------
		// implementation
		//---------------

		private CreateDefinitionHeader
			( definition : AST2.Definition
			, ns         : AST2.Namespace
			, directory  : string
			) : string
		{
			def fileName = MakeApiFileName(ns, definition.name, ".h");
			using (writer = CreateFile(Path.Combine(directory, fileName)))
			{
				writer.WriteMember("#pragma once");
				WriteIncludes(writer);
				foreach (part in ns.Parts)
					writer.OpenBlock("namespace {0}", part);
				WriteDefinition(definition, writer);
				foreach (_ in ns.Parts)
					writer.CloseBlock();
			}
			fileName;
		}

		private CreateStructImplementation
			( api       : AST2.Api
			, @struct   : AST2.Definition.Struct
			, ns        : AST2.Namespace
			, directory : string
			) : void
		{
			def className = MakeClassName(ns, @struct.name);

			def WriteReadMethod(writer)
			{
				writer.OpenBlock("void {0}::read(IProtocol & protocol)", className);
				foreach (field in @struct.fields)
					WriteReadStatement(api, field.Name, field.Type, false, writer);
				writer.CloseBlock();
			}
			def WriteWriteMethod(writer)
			{
				writer.OpenBlock("void {0}::write(IProtocol & protocol) const", className);
				foreach (field in @struct.fields)
					WriteWriteStatement(api, field.Name, field.Type, writer);
				writer.CloseBlock();
			}

			using (writer = CreateFile(Path.Combine(directory, MakeApiFileName(ns, @struct.name, ".cpp"))))
			{
				writer.WriteMember("#include \"api/{0}\"", MakeApiFileName(ns, @struct.name, ".h"));
				writer.WriteMember("#include \"IProtocol.h\"");
				WriteReadMethod(writer);
				WriteWriteMethod(writer);
			}
		}

		private CreateMainHeader
			( headers     : IEnumerable[string]
			, definitions : IEnumerable[AST2.Definition * AST2.Namespace]
			, directory   : string
			) : void
		{
			using (writer = CreateFile(MakeFilePath(directory, mainHeaderName, ".h")))
			{
				writer.WriteMember("#pragma once");
				foreach (definitions in GroupByNamespace(definitions))
				{
					def ns = definitions.Key;
					// open namespaces
					foreach (part in ns.Parts)
						writer.OpenBlock("namespace {0}", part);
					// write definitions
					foreach (definition in definitions)
						WriteDefinition(definition, writer);
					// close namespaces
					foreach (_ in ns.Parts)
						writer.CloseBlock();
				}
				foreach (header in headers)
					writer.WriteMember("#include \"{0}\"", header);
			}
		}

		private CreateClientServiceHeader
			( service   : AST2.Definition.Service
			, ns        : AST2.Namespace
			, directory : string
			) : void
		{
			using (writer = CreateFile(MakeFilePath(directory, service.name, ".h")))
			{
				writer.WriteMember("#pragma once");
				writer.WriteMember("#include \"FastTrackIpc/api/{0}.h\"", mainHeaderName);
				WriteIncludes(writer);
				writer.WriteMember("class IProtocol;");

				foreach (part in ns.Parts)
					writer.OpenBlock("namespace {0}", part);

				match (service.@base)
				{
				| Some(@base) => writer.OpenBlock("class {0} : public {1}", service.name, @base);
				| None        => writer.OpenBlock("class {0}", service.name);
				}

				writer.WriteLabel("public");
				writer.WriteComment("interface");
				writer.WriteMember("{0}(IProtocol & protocol);", service.name);

				writer.WriteLabel("public");
				writer.WriteComment("service function wrappers");
				foreach (function in service.functions)
					WriteFunctionDefinition(function, false, writer);

				writer.WriteLabel("private");
				writer.WriteComment("data");
				writer.WriteMember("IProtocol & protocol;");

				writer.CloseBlock(addSemicolon = true);

				foreach (_ in ns.Parts)
					writer.CloseBlock();
			}
		}

		private CreateClientServiceImplementation
			( api       : AST2.Api
			, service   : AST2.Definition.Service
			, ns        : AST2.Namespace
			, directory : string
			) : void
		{
			def className = MakeClassName(ns, service.name);

			def WriteConstructor(writer)
			{
				writer.OpenBlock
					( "{0}::{1}(IProtocol & protocol) : protocol(protocol)"
					, className
					, service.name
					);
				writer.CloseBlock();
			}

			def WriteWrapper(function, writer)
			{
				WriteFunctionDeclaration(className, function, false, writer);
				writer.WriteMember("protocol.writeInt32({0}ID_{1});", service.name, function.Name);
				foreach (field in function.Fields)
					WriteWriteStatement(api, field.Name, field.Type, writer);
				if (PassByValue(function.ReturnType))
				{
					WriteReadStatement(api, "result", function.ReturnType, true, writer);
					writer.WriteMember("return result;");
				}
				else
				{
					WriteReadStatement(api, "result", function.ReturnType, false, writer);
				}
				writer.CloseBlock();
			}

			using (writer = CreateFile(MakeFilePath(directory, service.name, ".cpp")))
			{
				writer.WriteMember("#include \"{0}.h\"", service.name);
				writer.WriteMember("#include \"{0}ID.h\"", service.name);
				writer.WriteMember("#include \"FastTrackIpc/IProtocol.h\"");

				WriteConstructor(writer);

				writer.WriteComment("service function wrappers");
				foreach (function in service.functions)
					WriteWrapper(function, writer);
			}
		}

		private CreateServerServiceHeader
			( service   : AST2.Definition.Service
			, ns        : AST2.Namespace
			, directory : string
			) : void
		{
			using (writer = CreateFile(MakeFilePath(directory, service.name, ".h")))
			{
				writer.WriteMember("#pragma once");
				WriteIncludes(writer);
				writer.WriteMember("#include \"FastTrackIpc/api/{0}.h\"", mainHeaderName);
				writer.WriteMember("#include \"FastTrackIpc/IProcessor.h\"");
				writer.WriteMember("class IProtocol;");

				foreach (part in ns.Parts)
					writer.OpenBlock("namespace {0}", part);

				match (service.@base)
				{
				| Some(@base) => writer.OpenBlock("class {0} : public IProcessor, public {1}", service.name, @base);
				| None        => writer.OpenBlock("class {0} : public IProcessor", service.name);
				}

				writer.WriteLabel("public");
				writer.WriteComment("IProcess implementation");
				writer.WriteMember("virtual bool process(IProtocol & protocol) const;");

				writer.WriteLabel("private");
				writer.WriteComment("service functions for the user to implement");
				foreach (function in service.functions)
					WriteFunctionDefinition(function, true, writer);

				writer.WriteLabel("private");
				writer.WriteComment("generated wrappers");
				foreach (function in service.functions)
				{
					writer.WriteMember
						( "void process_{0}(IProtocol & protocol) const;"
						, function.Name
						);
				}

				writer.CloseBlock(addSemicolon = true);

				foreach (_ in ns.Parts)
					writer.CloseBlock();
			}
		}

		private CreateServerServiceIDs
			( service   : AST2.Definition.Service
			, ns        : AST2.Namespace
			, directory : string
			) : void
		{
			using (writer = CreateFile(MakeFilePath(directory, service.name + "ID", ".h")))
			{
				writer.WriteMember("#pragma once");

				foreach (part in ns.Parts)
					writer.OpenBlock("namespace {0}", part);

				writer.OpenBlock("enum {0}ID", service.name);
				foreach (function in service.functions)
					writer.WriteMember("{0}ID_{1},", service.name, function.Name);
				writer.CloseBlock(addSemicolon = true);

				foreach (_ in ns.Parts)
					writer.CloseBlock(addSemicolon = true);
			}
		}

		private CreateServerServiceImplementation
			( api       : AST2.Api
			, service   : AST2.Definition.Service
			, ns        : AST2.Namespace
			, directory : string
			) : void
		{
			def className = MakeClassName(ns, service.name);

			def WriteSwitch(writer)
			{
				writer.OpenBlock("bool {0}::process(IProtocol & protocol) const", className);
				writer.WriteMember("int id = protocol.readInt32();");
				writer.OpenBlock("switch (id)");
				foreach (function in service.functions)
				{
					writer.WriteLabel("case {0}ID_{1}", service.name, function.Name);
					writer.WriteMember("process_{0}(protocol);", function.Name);
					writer.WriteMember("break;");
				}
				writer.WriteLabel("default");
				writer.WriteMember("throw std::runtime_error(\"{0}::process: unknown ID\");", className);
				writer.CloseBlock();
				writer.WriteMember("return true;");
				writer.CloseBlock();
			}

			def WriteWrapper(function, writer)
			{
				writer.OpenBlock
					( "void {0}::process_{1}(IProtocol & protocol) const"
					, className
					, function.Name
					);
				foreach (field in function.Fields)
					WriteReadStatement(api, field.Name, field.Type, true, writer);
				if (function.ReturnType.Definition is AST2.Definition.Void)
				{
					writer.WriteMember
						( "this->{0}({1});"
						, function.Name
						, string.Join(", ", function.Fields.Select(_.Name))
						);
				}
				else if (PassByValue(function.ReturnType))
				{
					writer.WriteMember
						( "{0} result = this->{1}({2});"
						, ToString(function.ReturnType)
						, function.Name
						, string.Join(", ", function.Fields.Select(_.Name))
						);
					WriteWriteStatement(api, "result", function.ReturnType, writer);
				}
				else
				{
					writer.WriteMember("{0} result;", ToString(function.ReturnType));
					writer.WriteMember
						( "this->{0}({1}, result);"
						, function.Name
						, string.Join(", ", function.Fields.Select(_.Name))
						);
					WriteWriteStatement(api, "result", function.ReturnType, writer);
				}
				writer.CloseBlock();
			}

			using (writer = CreateFile(MakeFilePath(directory, service.name, ".cpp")))
			{
				writer.WriteMember("#include \"{0}.h\"", service.name);
				writer.WriteMember("#include \"{0}ID.h\"", service.name);
				writer.WriteMember("#include \"FastTrackIpc/IProtocol.h\"");

				writer.WriteComment("IProcess implementation");
				WriteSwitch(writer);

				writer.WriteComment("service function wrappers");
				foreach (function in service.functions)
					WriteWrapper(function, writer);
			}
		}

		private CreateServerServiceStubs
			( service   : AST2.Definition.Service
			, ns        : AST2.Namespace
			, directory : string
			) : void
		{
			def className = MakeClassName(ns, service.name);

			def WriteStub(function, writer)
			{
				WriteFunctionDeclaration(className, function, true, writer);
				writer.WriteComment("add function implementation here");
				writer.CloseBlock();
			}
			using (writer = CreateFile(MakeFilePath(directory, service.name + "_impl", ".cpp")))
			{
				writer.WriteMember("#include \"{0}.h\"", service.name);

				writer.WriteComment("service functions for the user to implement");
				foreach (function in service.functions)
					WriteStub(function, writer);
			}
		}

		private GroupByNamespace
			( definitions : IEnumerable[AST2.Definition * AST2.Namespace]
			) : IEnumerable[IGrouping[AST2.Namespace, AST2.Definition]]
		{
			definitions.GroupBy
				( keySelector     = (_, ns) => ns
				, elementSelector = (defn, _) => defn
				)
		}

		private MakeApiFileName
			( ns        : AST2.Namespace
			, name      : string
			, extension : string
			) : string
		{
			def fileName = StringBuilder();
			foreach (part in ns.Parts)
			{
				_ = fileName.Append(part);
				_ = fileName.Append("_");
			}
			_ = fileName.Append(name);
			_ = fileName.Append(extension);
			fileName.ToString();
		}

		private MakeClassName(ns : AST2.Namespace, name : string) : string
		{
			def result = StringBuilder();
			foreach (part in ns.Parts)
			{
				_ = result.Append(part);
				_ = result.Append("::");
			}
			_ = result.Append(name);
			result.ToString();
		}

		private MakeFilePath
			( directory : string
			, fileName  : string
			, extension : string
			) : string
		{
			Path.Combine(directory, fileName + extension)
		}


		private PassByValue(ty : AST2.Type) : bool
		{
			match (ty.Definition)
			{
			| Enum        => true
			| Primitive   => true
			| Typedef(ty) => PassByValue(ty)
			| _           => false
			}
		}

		private WriteDefinition
			( definition  : AST2.Definition
			, writer      : CodeWriter
			) : void
		{
			def name = definition.name;

			match (definition)
			{
			| Collection =>
				throw GeneratorException("ICE: called WriteDefinition for a collection type.");

			| Const(ty, value) =>
				writer.WriteMember("const {0} {1} = {2};", ToString(ty), name, ToString(value))

			| Enum(members) =>
				writer.OpenBlock("enum {0}", name);
				foreach (member in members)
				{
					match (member.Value)
					{
					| Some(num) => writer.WriteMember("{0} = {1},", member.Name, num)
					| None      => writer.WriteMember("{0},", member.Name)
					}
				}
				writer.CloseBlock(addSemicolon = true);

			| Exception(fields) =>
				writer.WriteMember("class IProtocol;");
				writer.OpenBlock("struct {0} : std::exception", name);
				foreach (field in fields)
					writer.WriteMember("{0} {1};", ToString(field.Type), field.Name);
				writer.WriteMember("void read(IProtocol & protocol);");
				writer.WriteMember("void write(IProtocol & protocol) const;");
				writer.CloseBlock(addSemicolon = true);

			| Primitive =>
				throw GeneratorException("ICE: called WriteDefinition for a primitive type.");

			| Service => ()

			| Struct(fields) =>
				writer.WriteMember("class IProtocol;");
				writer.OpenBlock("struct {0}", name);
				foreach (field in fields)
					writer.WriteMember("{0} {1};", ToString(field.Type), field.Name);
				writer.WriteMember("void read(IProtocol & protocol);");
				writer.WriteMember("void write(IProtocol & protocol) const;");
				writer.CloseBlock(addSemicolon = true);

			| Typedef(ty) =>
				writer.WriteMember("typedef {0} {1};", ToString(ty), name);

			| Void =>
				throw GeneratorException("ICE: called WriteDefinition for the void type.");
			}
		}

		// Must be followed by writer.CloseBlock()
		private WriteFunctionDeclaration
			( className : string
			, function  : AST2.Function
			, isConst   : bool
			, writer    : CodeWriter
			) : void
		{
			if (PassByValue(function.ReturnType))
			{
				writer.OpenBlock
					( "{0} {1}::{2}({3}){4}"
					, ToString(function.ReturnType)
					, className
					, function.Name
					, string.Join(", ", function.Fields.Select(ToString))
					, if (isConst) " const" else ""
					);
			}
			else
			{
				writer.OpenBlock
					( "void {0}::{1}({2}, {3} & result){4}"
					, className
					, function.Name
					, string.Join(", ", function.Fields.Select(ToString))
					, ToString(function.ReturnType)
					, if (isConst) " const" else ""
					);
			}
		}

		private WriteFunctionDefinition
			( function : AST2.Function
			, isConst  : bool
			, writer   : CodeWriter
			) : void
		{
			if (PassByValue(function.ReturnType))
			{
				writer.WriteMember
					( "{0} {1}({2}){3};"
					, ToString(function.ReturnType)
					, function.Name
					, string.Join(", ", function.Fields.Select(ToString))
					, if (isConst) " const" else ""
					);
			}
			else
			{
				writer.WriteMember
					( "void {0}({1}, {2} & result){3};"
					, function.Name
					, string.Join(", ", function.Fields.Select(ToString))
					, ToString(function.ReturnType)
					, if (isConst) " const" else ""
					);
			}
		}

		private WriteIncludes(writer : CodeWriter) : void
		{
			def includes = [ "map", "set", "stdexcept", "stdint.h", "vector" ];
			foreach (entry in includes)
				writer.WriteMember("#include <{0}>", entry);
		}

		private WriteReadStatement
			( api        : AST2.Api
			, name       : string
			, ty         : AST2.Type
			, declareLhs : bool
			, writer     : CodeWriter
			) : void
		{
			def Decl(tyName)
			{
				if (declareLhs) tyName + " " else ""
			}
			match (ty.Definition.name)
			{
			| "binary" =>
				// make binary a list<byte>
				def listType = AST2.Type(api.Definitions["list"], [ AST2.Type(api.Definitions["byte"], []) ]);
				WriteReadStatement(api, name, listType, false, writer);
			| "bool" =>
				writer.WriteMember("{0}{1} = protocol.readBool();", Decl("bool"), name);
			| "byte" =>
				writer.WriteMember("{0}{1} = protocol.readInt8();", Decl("int8_t"), name);
			| "float" =>
				writer.WriteMember("{0}{1} = protocol.readFloat();", Decl("float"), name);
			| "double" =>
				writer.WriteMember("{0}{1} = protocol.readDouble();", Decl("double"), name);
			| "i16" =>
				writer.WriteMember("{0}{1} = protocol.readInt16();", Decl("int16_t"), name);
			| "i32" =>
				writer.WriteMember("{0}{1} = protocol.readInt32();", Decl("int32_t"), name);
			| "i64" =>
				writer.WriteMember("{0}{1} = protocol.readInt64();", Decl("int64_t"), name);
			| "list" =>
				when (declareLhs)
					writer.WriteMember("{0} {1};", ToString(ty), name);
				writer.WriteMember("{0}.resize(protocol.readInt32());", name);
				writer.OpenBlock("for (int i = 0, size = {0}.size(); i != size; ++i)", name);
				WriteReadStatement(api, $"$name[i]", ty.Parameters.Head, false, writer);
				writer.CloseBlock();
			| "map"    => () // TODO
			| "set"    => () // TODO
			| "string" =>
				writer.WriteMember("{0}{1} = protocol.readString();", Decl("std::string"), name);
			| "void"   => ()
			| tyName =>
				match (ty.Definition)
				{
				| Enum =>
					writer.WriteMember("{0}{1} = static_cast<{2}>(protocol.readInt32());", Decl(tyName), name, tyName);
				| Struct | Exception =>
					when (declareLhs)
						writer.WriteMember("{0} {1};", ToString(ty), name);
					writer.WriteMember("{0}.read(protocol);", name);
				| Typedef(ty) =>
					WriteReadStatement(api, name, ty, declareLhs, writer)
				| _ => ()
				}
			}
		}

		private WriteWriteStatement
			( api    : AST2.Api
			, name   : string
			, ty     : AST2.Type
			, writer : CodeWriter
			) : void
		{
			match (ty.Definition.name)
			{
			| "binary" =>
				// make binary a list<byte>
				def listType = AST2.Type(api.Definitions["list"], [ AST2.Type(api.Definitions["byte"], []) ]);
				WriteWriteStatement(api, name, listType, writer);
			| "bool" =>
				writer.WriteMember("protocol.writeBool({0});", name);
			| "byte" =>
				writer.WriteMember("protocol.writeInt8({0});", name);
			| "float" =>
				writer.WriteMember("protocol.writeFloat({0});", name);
			| "double" =>
				writer.WriteMember("protocol.writeDouble({0});", name);
			| "i16" =>
				writer.WriteMember("protocol.writeInt16({0});", name);
			| "i32" =>
				writer.WriteMember("protocol.writeInt32({0});", name);
			| "i64" =>
				writer.WriteMember("protocol.writeInt64({0});", name);
			| "list" =>
				writer.WriteMember("protocol.writeInt32({0}.size());", name);
				writer.OpenBlock("for (int i = 0, size = {0}.size(); i != size; ++i)", name);
				WriteWriteStatement(api, $"$name[i]", ty.Parameters.Head, writer);
				writer.CloseBlock();
			| "map"    => ()
			| "set"    => ()
			| "string" =>
				writer.WriteMember("protocol.writeString({0});", name);
			| "void"   => ()
			| _ =>
				match (ty.Definition)
				{
				| Enum =>
					writer.WriteMember("protocol.writeInt32({0});", name);
				| Struct | Exception =>
					writer.WriteMember("{0}.write(protocol);", name);
				| Typedef(ty) =>
					WriteWriteStatement(api, name, ty, writer)
				| _ => ()
				}
			}
		}

		private ToString(field : AST2.Field) : string
		{
			if (PassByValue(field.Type))
				string.Format("{0} {1}", ToString(field.Type), field.Name)
			else
				string.Format("const {0} & {1}", ToString(field.Type), field.Name)
		}

		private ToString(ty : AST2.Type) : string
		{
			def (name, parameters) = match (ty.Definition.name)
			{
			| "binary" => ("std::vector", [ "int8_t" ])
			| "bool"   => ("bool",    [])
			| "byte"   => ("int8_t",  [])
			| "float"  => ("float",   [])
			| "double" => ("double",  [])
			| "i16"    => ("int16_t", [])
			| "i32"    => ("int32_t", [])
			| "i64"    => ("int64_t", [])
			| "list"   => ("std::vector", ty.Parameters.Map(ToString))
			| "map"    => ("std::map",    ty.Parameters.Map(ToString))
			| "set"    => ("std::set",    ty.Parameters.Map(ToString))
			| "string" => ("std::string", [])
			| "void"   => ("void", [])
			| name     => (name,   [])
			}
			match (string.Join(", ", parameters))
			{
			| ""                     => name
			| p when p.EndsWith(">") => string.Format("{0}<{1} >", name, p)
			| p                      => string.Format("{0}<{1}>",  name, p)
			}
		}

		private ToString(ty : AST2.Constant) : string
		{
		| Int(x) => x.ToString();
		}

		private CreateFile(path : string) : CodeWriter
		{
			def writer = CodeWriter(indent, File.CreateText(path));
			writer.WriteComment("Automatically generated file");
			writer;
		}
	}
}
